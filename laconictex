#!/usr/bin/env python3

# See also: texfot.pl, texloganalyser

import sys
import subprocess
import re
import argparse
import enum

try:
    import termcolor
except ImportError:
    termcolor = None


__version__ = '0.0.5'
default_command = 'pdflatex -interaction=nonstopmode'
laconictexdescription =\
"""Filter LaTeX output to relevant information.

The default command is given by "{}".

""".format(default_command)


colorlevels = ['white', 'white', 'yellow', 'red']
attrlevels = [['reverse', 'dark'], ['dark'], [], ['bold']]

success_r = r'Output written'
failure_r = r'No pages of output'
boxwarning_r = r'.*(Ov|Und)erfull \\(h|v)box'
tex_error_r = r'^!'
lineno_r = r'^l\.(\d+)'
latexwarning_r = r'.*(?:W|w)arning:'
latexerror_r = r'.*(?:E|e)rror:'
runaway_r = r'Runaway argument\?'
triplehash_r = r'^###'
fatalerr_r = r'^!  ==> Fatal'  # a tex_error_r that should _not_ get a message block

info_re = re.compile(r'|'.join([success_r]))
warning_re = re.compile(r'|'.join([boxwarning_r,
                                   latexwarning_r,
                                   lineno_r]))
critical_re = re.compile(r'|'.join([tex_error_r,
                                    latexerror_r,
                                    failure_r,
                                    runaway_r,
                                    triplehash_r]))

messageblock_re = re.compile(r'|'.join([tex_error_r,
                                        lineno_r,
                                        latexwarning_r,
                                        latexerror_r,
                                        runaway_r]))
nomessageblock_re = re.compile(r'|'.join([boxwarning_r,
                                          success_r,
                                          failure_r,
                                          triplehash_r,
                                          fatalerr_r]))


class MessageLevel(enum.IntEnum):
    noise = 0
    info = 1
    warning = 2
    critical = 3

    @classmethod
    def find(cls, line):
        if critical_re.match(line):
            return cls.critical
        elif warning_re.match(line):
            return cls.warning
        elif info_re.match(line):
            return cls.info
        return cls.noise


def laconictex_parseargs(argv):
    parser = argparse.ArgumentParser(prog='laconictex', description=laconictexdescription)
    parser.add_argument('--debug', '-D', action='store_true', default=False,
                        help='Debug mode')
    parser.add_argument('--command', '-c', action='store', default=default_command,
                        help='LaTeX command to use')
    parser.add_argument('--linenumbers', '-l', action='store_true', default=False,
                        help='Display output line numbers')
    parser.add_argument('filename', help='LaTeX file')

    return parser.parse_args(argv[1:])


def displayline(lineno, line, level, with_line_number=False):
    if with_line_number:
        print('{:>5}: {}'.format(lineno, color(line, level)), end='')
    else:
        print(color(line,level), end='')


def color(line, level):
    if termcolor:
        return termcolor.colored(line, colorlevels[level], attrs=attrlevels[level])
    return line


def main(argv=[]):
    args = laconictex_parseargs(argv)

    # Use stdbuf to prevent buffering when outputing to a pipe.
    texproc =  subprocess.Popen(['stdbuf', '-oL'] + args.command.split() + [args.filename],
                                stdout=subprocess.PIPE,
                                bufsize=1,
                                universal_newlines=True)

    in_messageblock = False
    messagelevel = MessageLevel.noise
    to_display = False

    for lineno, line in enumerate(texproc.stdout):
        if in_messageblock:
            to_display = True
            if line.startswith('\n') or line.strip() == '':
                ## Uncomment the following line for more compact output
                ## with no empty lines between message blocks.
                # to_display = False
                in_messageblock = False
        elif nomessageblock_re.match(line):
            to_display = True
            messagelevel = MessageLevel.find(line)
        elif messageblock_re.match(line):
            in_messageblock = True
            messagelevel = MessageLevel.find(line)
            to_display = True
        elif args.debug:
            messagelevel = MessageLevel.noise
            to_display = True
        else:
            messagelevel = MessageLevel.noise
            to_display = False

        if to_display:
            displayline(lineno, line, messagelevel, args.linenumbers)

    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv))
